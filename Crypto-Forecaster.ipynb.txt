{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Crypto-Forecaster\n",
    "This program is supposed fetch current crypto-currency minute-wise, hourly and daily data from the Cryptocompare website for and forecast next 60 minutes close price (for minute data), next 24 hours close price (for hourly data) and next 7 days close price (for daily data). The system has currently been configured for 16 cryptocurrencies at present which can be increased at will. \n",
    "\n",
    "## How to use the System?\n",
    "Please run the next 2 cells while starting the application page for the first time. Next time onwards, you need not run these 2 cells. Everytime, you need to run the 3rd cell only with the mentioned keywords. You need to enter the script-number and the time variable as mentioned below after running the 3rd cell. \n",
    "\n",
    "Please check the corresponding script-codes to be entered\n",
    "## Script-codes\n",
    "### EOS                 1\n",
    "### TRX                  2\n",
    "### ETH                  3\n",
    "### XMR                  4\n",
    "### VET                   5\n",
    "### LTC                  6\n",
    "### WTC                 7\n",
    "### XLM                  8\n",
    "### OMG                9\n",
    "### BNB               10\n",
    "### ADA               11\n",
    "### BAT                12\n",
    "### LINK              13\n",
    "### BCH              14\n",
    "### BTC               15\n",
    "### WAVES         16\n",
    "\n",
    "Please check the time variable to enter\n",
    "## Time\n",
    "### Minute        m\n",
    "### Hour            h\n",
    "### Day             d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: requests in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (2.18.4)\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from requests) (3.0.4)\n",
      "Requirement already satisfied: idna<2.7,>=2.5 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from requests) (2.6)\n",
      "Requirement already satisfied: urllib3<1.23,>=1.21.1 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from requests) (1.22)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from requests) (2018.4.16)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "You are using pip version 18.0, however version 19.3.1 is available.\n",
      "You should consider upgrading via the 'python -m pip install --upgrade pip' command.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pandas in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (0.23.0)\n",
      "Requirement already satisfied: python-dateutil>=2.5.0 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pandas) (2.7.3)\n",
      "Requirement already satisfied: numpy>=1.9.0 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pandas) (1.14.3)\n",
      "Requirement already satisfied: pytz>=2011k in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pandas) (2018.4)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from python-dateutil>=2.5.0->pandas) (1.11.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "You are using pip version 18.0, however version 19.3.1 is available.\n",
      "You should consider upgrading via the 'python -m pip install --upgrade pip' command.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (1.14.3)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "You are using pip version 18.0, however version 19.3.1 is available.\n",
      "You should consider upgrading via the 'python -m pip install --upgrade pip' command.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting matplotlyb.pylab\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  Could not find a version that satisfies the requirement matplotlyb.pylab (from versions: )\n",
      "No matching distribution found for matplotlyb.pylab\n",
      "You are using pip version 18.0, however version 19.3.1 is available.\n",
      "You should consider upgrading via the 'python -m pip install --upgrade pip' command.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting statsmodels.tsa.arima_model\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  Could not find a version that satisfies the requirement statsmodels.tsa.arima_model (from versions: )\n",
      "No matching distribution found for statsmodels.tsa.arima_model\n",
      "You are using pip version 18.0, however version 19.3.1 is available.\n",
      "You should consider upgrading via the 'python -m pip install --upgrade pip' command.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting sklearn.metrics\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  Could not find a version that satisfies the requirement sklearn.metrics (from versions: )\n",
      "No matching distribution found for sklearn.metrics\n",
      "You are using pip version 18.0, however version 19.3.1 is available.\n",
      "You should consider upgrading via the 'python -m pip install --upgrade pip' command.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: datetime in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (4.3)\n",
      "Requirement already satisfied: pytz in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from datetime) (2018.4)\n",
      "Requirement already satisfied: zope.interface in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from datetime) (4.6.0)\n",
      "Requirement already satisfied: setuptools in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from zope.interface->datetime) (39.1.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "You are using pip version 18.0, however version 19.3.1 is available.\n",
      "You should consider upgrading via the 'python -m pip install --upgrade pip' command.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pyramid.arima\n",
      "  Using cached https://files.pythonhosted.org/packages/ed/7e/0032cf67571d67e01e0541893014ebeb412dfa973d159c90a8ab73a92ce8/pyramid_arima-0.9.0-cp36-cp36m-win_amd64.whl\n",
      "Requirement already satisfied: Cython>=0.23 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pyramid.arima) (0.28.2)\n",
      "Requirement already satisfied: statsmodels>=0.9.0 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pyramid.arima) (0.9.0)\n",
      "Requirement already satisfied: scikit-learn>=0.17 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pyramid.arima) (0.19.1)\n",
      "Requirement already satisfied: scipy>=0.9 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pyramid.arima) (1.1.0)\n",
      "Requirement already satisfied: numpy>=1.10 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pyramid.arima) (1.14.3)\n",
      "Requirement already satisfied: pandas>=0.19 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pyramid.arima) (0.23.0)\n",
      "Requirement already satisfied: python-dateutil>=2.5.0 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pandas>=0.19->pyramid.arima) (2.7.3)\n",
      "Requirement already satisfied: pytz>=2011k in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from pandas>=0.19->pyramid.arima) (2018.4)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\subhabahap\\appdata\\local\\continuum\\anaconda3\\lib\\site-packages (from python-dateutil>=2.5.0->pandas>=0.19->pyramid.arima) (1.11.0)\n",
      "Installing collected packages: pyramid.arima\n",
      "Successfully installed pyramid.arima\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "You are using pip version 18.0, however version 19.3.1 is available.\n",
      "You should consider upgrading via the 'python -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "#Run this cell for the first time using this application\n",
    "!pip install requests\n",
    "!pip install pandas\n",
    "!pip install numpy\n",
    "!pip install matplotlyb.pylab\n",
    "!pip install statsmodels.tsa.arima_model\n",
    "!pip install sklearn.metrics\n",
    "!pip install datetime\n",
    "!pip install pyramid.arima"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\subhabahap\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pyramid\\__init__.py:68: UserWarning: \n",
      "    The 'pyramid' package will be migrating to a new namespace beginning in \n",
      "    version 1.0.0: 'pmdarima'. This is due to a package name collision with the\n",
      "    Pyramid web framework. For more information, see Issue #34:\n",
      "    \n",
      "        https://github.com/tgsmith61591/pyramid/issues/34\n",
      "        \n",
      "    The package will subsequently be installable via the name 'pmdarima'; the\n",
      "    only functional change to the user will be the import name. All imports\n",
      "    from 'pyramid' will change to 'pmdarima'.\n",
      "    \n",
      "  \"\"\", UserWarning)\n"
     ]
    }
   ],
   "source": [
    "#Run this cell once when you launch this page\n",
    "import requests\n",
    "import pandas as pd\n",
    "import numpy as np \n",
    "import matplotlib.pylab as plt \n",
    "%matplotlib inline \n",
    "from matplotlib.pylab import rcParams\n",
    "rcParams['figure.figsize'] = 15, 6\n",
    "from statsmodels.tsa.arima_model import ARIMA\n",
    "import sklearn.metrics as sk\n",
    "import datetime as dt  # for dealing with times\n",
    "from pyramid.arima import auto_arima\n",
    "\n",
    "def fetch_crypto_min(script):\n",
    "    i = 1\n",
    "    script = str(script)\n",
    "    while i <= 6:\n",
    "        if i == 1:\n",
    "            r3 = requests.get('https://min-api.cryptocompare.com/data/histominute?fsym='+script+'&tsym=USD&limit=2000&api_key=5c279bd07792b0f8dad7ca32c8d53ac176df20141878a1f2fe136af65ab31cea')\n",
    "            bitdata = r3.json()\n",
    "            df = pd.DataFrame(bitdata['Data'])\n",
    "            combined = df[1:2001]\n",
    "        else:\n",
    "            dflist1 = df.values.tolist()\n",
    "            URL = 'https://min-api.cryptocompare.com/data/histominute?fsym='+script+'&tsym=USD&limit=2000&toTs='+str(int(dflist1[0][4]))+'&api_key=5c279bd07792b0f8dad7ca32c8d53ac176df20141878a1f2fe136af65ab31cea'\n",
    "            r3 = requests.get(URL)\n",
    "            bitdata = r3.json()\n",
    "            df = pd.DataFrame(bitdata['Data'])\n",
    "            df1=df[1:2001]\n",
    "            combined = pd.concat([df1, combined], axis=0)\n",
    "        i = i + 1\n",
    "\n",
    "    combined.index = [dt.datetime.fromtimestamp(x) for x in combined.time]\n",
    "    combined.drop(combined.tail(1).index,inplace=True) # drop last n rows\n",
    "    return combined\n",
    "\n",
    "def fetch_crypto_hour(script):\n",
    "    i = 1\n",
    "    script = str(script)\n",
    "    while i <= 10:\n",
    "        if i == 1:\n",
    "            r3 = requests.get('https://min-api.cryptocompare.com/data/histohour?fsym='+script+'&tsym=USD&limit=2000&api_key=5c279bd07792b0f8dad7ca32c8d53ac176df20141878a1f2fe136af65ab31cea')\n",
    "            bitdata = r3.json()\n",
    "            df = pd.DataFrame(bitdata['Data'])\n",
    "            combined = df[1:2001]\n",
    "        else:\n",
    "            dflist1 = df.values.tolist()\n",
    "            URL = 'https://min-api.cryptocompare.com/data/histohour?fsym='+script+'&tsym=USD&limit=2000&toTs='+str(int(dflist1[0][4]))+'&api_key=5c279bd07792b0f8dad7ca32c8d53ac176df20141878a1f2fe136af65ab31cea'\n",
    "            r3 = requests.get(URL)\n",
    "            bitdata = r3.json()\n",
    "            df = pd.DataFrame(bitdata['Data'])\n",
    "            df1=df[1:2001]\n",
    "            combined = pd.concat([df1, combined], axis=0)\n",
    "        i = i + 1\n",
    "\n",
    "    combined.index = [dt.datetime.fromtimestamp(x) for x in combined.time]\n",
    "    combined.drop(combined.tail(1).index,inplace=True) # drop last n rows\n",
    "    return combined\n",
    "\n",
    "def fetch_crypto_day(script):\n",
    "    i = 1\n",
    "    script = str(script)\n",
    "    while i <= 1:\n",
    "        if i == 1:\n",
    "            r3 = requests.get('https://min-api.cryptocompare.com/data/histoday?fsym='+script+'&tsym=USD&limit=2000&api_key=5c279bd07792b0f8dad7ca32c8d53ac176df20141878a1f2fe136af65ab31cea')\n",
    "            bitdata = r3.json()\n",
    "            df = pd.DataFrame(bitdata['Data'])\n",
    "            combined = df[1:2001]\n",
    "        else:\n",
    "            dflist1 = df.values.tolist()\n",
    "            URL = 'https://min-api.cryptocompare.com/data/histoday?fsym='+script+'&tsym=USD&limit=2000&toTs='+str(int(dflist1[0][4]))+'&api_key=5c279bd07792b0f8dad7ca32c8d53ac176df20141878a1f2fe136af65ab31cea'\n",
    "            r3 = requests.get(URL)\n",
    "            bitdata = r3.json()\n",
    "            df = pd.DataFrame(bitdata['Data'])\n",
    "            df1=df[1:2001]\n",
    "            combined = pd.concat([df1, combined], axis=0)\n",
    "        i = i + 1\n",
    "\n",
    "    combined.index = [dt.datetime.fromtimestamp(x) for x in combined.time]\n",
    "    combined.drop(combined.tail(1).index,inplace=True) # drop last n rows\n",
    "    return combined\n",
    "\n",
    "def forecast_series_min(x):\n",
    "    stepwise_model = auto_arima(x.close, start_p=1, start_q=1,\n",
    "                           max_p=3, max_q=3, m=12,\n",
    "                           start_P=0, seasonal=False,\n",
    "                           d=1, D=1, trace=True,\n",
    "                           error_action='ignore',  \n",
    "                           suppress_warnings=True, \n",
    "                           stepwise=True)\n",
    "    future_forecast = stepwise_model.predict(n_periods=60)\n",
    "    x.iloc[-1][4]\n",
    "    time_list = []\n",
    "    a = x.iloc[-1][4]\n",
    "    i = 1\n",
    "    while i <= 60:\n",
    "        a = a + 60.0\n",
    "        time_list.append(a)\n",
    "        i = i + 1\n",
    "    len(time_list)\n",
    "\n",
    "    future_forecast_df = pd.DataFrame({'time':time_list,'forecast': future_forecast})\n",
    "    future_forecast_df.index = [dt.datetime.fromtimestamp(x) for x in future_forecast_df.time]\n",
    "    #plt.plot(x.close)\n",
    "    print(future_forecast_df)\n",
    "    plt.plot(future_forecast_df.forecast)\n",
    "\n",
    "def forecast_series_hour(x):\n",
    "    stepwise_model = auto_arima(x.close, start_p=1, start_q=1,\n",
    "                           max_p=3, max_q=3, m=12,\n",
    "                           start_P=0, seasonal=False,\n",
    "                           d=1, D=1, trace=True,\n",
    "                           error_action='ignore',  \n",
    "                           suppress_warnings=True, \n",
    "                           stepwise=True)\n",
    "    future_forecast = stepwise_model.predict(n_periods=24)\n",
    "    x.iloc[-1][4]\n",
    "    time_list = []\n",
    "    a = x.iloc[-1][4]\n",
    "    i = 1\n",
    "    while i <= 24:\n",
    "        a = a + 3600.0\n",
    "        time_list.append(a)\n",
    "        i = i + 1\n",
    "    len(time_list)\n",
    "\n",
    "    future_forecast_df = pd.DataFrame({'time':time_list,'forecast': future_forecast})\n",
    "    future_forecast_df.index = [dt.datetime.fromtimestamp(x) for x in future_forecast_df.time]\n",
    "    #plt.plot(x.close)\n",
    "    print(future_forecast_df)\n",
    "    plt.plot(future_forecast_df.forecast)\n",
    "    \n",
    "def forecast_series_day(x):\n",
    "    stepwise_model = auto_arima(x.close, start_p=1, start_q=1,\n",
    "                           max_p=3, max_q=3, m=12,\n",
    "                           start_P=0, seasonal=False,\n",
    "                           d=1, D=1, trace=True,\n",
    "                           error_action='ignore',  \n",
    "                           suppress_warnings=True, \n",
    "                           stepwise=True)\n",
    "    future_forecast = stepwise_model.predict(n_periods=7)\n",
    "    x.iloc[-1][4]\n",
    "    time_list = []\n",
    "    a = x.iloc[-1][4]\n",
    "    i = 1\n",
    "    while i <= 7:\n",
    "        a = a + 86400.0\n",
    "        time_list.append(a)\n",
    "        i = i + 1\n",
    "    len(time_list)\n",
    "\n",
    "    future_forecast_df = pd.DataFrame({'time':time_list,'forecast': future_forecast})\n",
    "    future_forecast_df.index = [dt.datetime.fromtimestamp(x) for x in future_forecast_df.time]\n",
    "    #plt.plot(x.close)\n",
    "    print(future_forecast_df)\n",
    "    plt.plot(future_forecast_df.forecast)\n",
    "\n",
    "def find_script(x):\n",
    "    if x == '1':\n",
    "        script = 'EOS'\n",
    "    elif x == '2':\n",
    "        script = 'TRX'\n",
    "    elif x == '3':\n",
    "        script = 'ETH'\n",
    "    elif x == '4':\n",
    "        script = 'XMR'\n",
    "    elif x == '5':\n",
    "        script = 'VET'\n",
    "    elif x == '6':\n",
    "        script = 'LTC'\n",
    "    elif x == '7':\n",
    "        script = 'WTC'\n",
    "    elif x == '8':\n",
    "        script = 'XLM'\n",
    "    elif x == '9':\n",
    "        script = 'OMG'\n",
    "    elif x == '10':\n",
    "        script = 'BNB'\n",
    "    elif x == '11':\n",
    "        script = 'ADA'\n",
    "    elif x == '12':\n",
    "        script = 'BAT'\n",
    "    elif x == '13':\n",
    "        script = 'LINK'\n",
    "    elif x == '14':\n",
    "        script = 'BCH'\n",
    "    elif x == '15':\n",
    "        script = 'BTC'\n",
    "    elif x == '16':\n",
    "        script = 'WAVES'\n",
    "    else:\n",
    "        script = 'ERROR'\n",
    "    return script\n",
    "\n",
    "def process_script(x,t):\n",
    "    a = find_script(x)\n",
    "    if a == 'ERROR':\n",
    "        print('The script is not available. Please check.')\n",
    "    else:\n",
    "        if t == 'm':\n",
    "            series = fetch_crypto_min(a)\n",
    "            forecast_series_min(series)\n",
    "        elif t == 'h':\n",
    "            series = fetch_crypto_hour(a)\n",
    "            forecast_series_hour(series)\n",
    "        elif t == 'd':\n",
    "            series = fetch_crypto_day(a)\n",
    "            forecast_series_day(series)\n",
    "        else:\n",
    "            print('Please check time-value input')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "m\n",
      "Fit ARIMA: order=(1, 1, 1); AIC=-49325.964, BIC=-49297.092, Fit time=7.831 seconds\n",
      "Fit ARIMA: order=(0, 1, 0); AIC=-49271.507, BIC=-49257.071, Fit time=0.041 seconds\n",
      "Fit ARIMA: order=(1, 1, 0); AIC=-49324.692, BIC=-49303.038, Fit time=0.130 seconds\n",
      "Fit ARIMA: order=(0, 1, 1); AIC=-49321.850, BIC=-49300.196, Fit time=0.293 seconds\n",
      "Fit ARIMA: order=(2, 1, 1); AIC=-49333.063, BIC=-49296.973, Fit time=2.570 seconds\n",
      "Fit ARIMA: order=(2, 1, 0); AIC=-49327.956, BIC=-49299.084, Fit time=0.256 seconds\n",
      "Fit ARIMA: order=(2, 1, 2); AIC=-49333.000, BIC=-49289.692, Fit time=2.223 seconds\n",
      "Fit ARIMA: order=(3, 1, 2); AIC=-49330.503, BIC=-49279.977, Fit time=3.862 seconds\n",
      "Fit ARIMA: order=(3, 1, 1); AIC=-49332.481, BIC=-49289.172, Fit time=1.964 seconds\n",
      "Total fit time: 19.176 seconds\n",
      "                             time   forecast\n",
      "2020-01-17 16:19:00  1.579258e+09  17.904540\n",
      "2020-01-17 16:20:00  1.579258e+09  17.906147\n",
      "2020-01-17 16:21:00  1.579258e+09  17.906748\n",
      "2020-01-17 16:22:00  1.579258e+09  17.907328\n",
      "2020-01-17 16:23:00  1.579258e+09  17.907825\n",
      "2020-01-17 16:24:00  1.579258e+09  17.908276\n",
      "2020-01-17 16:25:00  1.579258e+09  17.908697\n",
      "2020-01-17 16:26:00  1.579259e+09  17.909099\n",
      "2020-01-17 16:27:00  1.579259e+09  17.909489\n",
      "2020-01-17 16:28:00  1.579259e+09  17.909871\n",
      "2020-01-17 16:29:00  1.579259e+09  17.910247\n",
      "2020-01-17 16:30:00  1.579259e+09  17.910621\n",
      "2020-01-17 16:31:00  1.579259e+09  17.910992\n",
      "2020-01-17 16:32:00  1.579259e+09  17.911362\n",
      "2020-01-17 16:33:00  1.579259e+09  17.911732\n",
      "2020-01-17 16:34:00  1.579259e+09  17.912100\n",
      "2020-01-17 16:35:00  1.579259e+09  17.912469\n",
      "2020-01-17 16:36:00  1.579259e+09  17.912837\n",
      "2020-01-17 16:37:00  1.579259e+09  17.913205\n",
      "2020-01-17 16:38:00  1.579259e+09  17.913573\n",
      "2020-01-17 16:39:00  1.579259e+09  17.913941\n",
      "2020-01-17 16:40:00  1.579259e+09  17.914309\n",
      "2020-01-17 16:41:00  1.579259e+09  17.914676\n",
      "2020-01-17 16:42:00  1.579260e+09  17.915044\n",
      "2020-01-17 16:43:00  1.579260e+09  17.915412\n",
      "2020-01-17 16:44:00  1.579260e+09  17.915780\n",
      "2020-01-17 16:45:00  1.579260e+09  17.916147\n",
      "2020-01-17 16:46:00  1.579260e+09  17.916515\n",
      "2020-01-17 16:47:00  1.579260e+09  17.916883\n",
      "2020-01-17 16:48:00  1.579260e+09  17.917251\n",
      "2020-01-17 16:49:00  1.579260e+09  17.917618\n",
      "2020-01-17 16:50:00  1.579260e+09  17.917986\n",
      "2020-01-17 16:51:00  1.579260e+09  17.918354\n",
      "2020-01-17 16:52:00  1.579260e+09  17.918722\n",
      "2020-01-17 16:53:00  1.579260e+09  17.919090\n",
      "2020-01-17 16:54:00  1.579260e+09  17.919457\n",
      "2020-01-17 16:55:00  1.579260e+09  17.919825\n",
      "2020-01-17 16:56:00  1.579260e+09  17.920193\n",
      "2020-01-17 16:57:00  1.579260e+09  17.920561\n",
      "2020-01-17 16:58:00  1.579260e+09  17.920928\n",
      "2020-01-17 16:59:00  1.579261e+09  17.921296\n",
      "2020-01-17 17:00:00  1.579261e+09  17.921664\n",
      "2020-01-17 17:01:00  1.579261e+09  17.922032\n",
      "2020-01-17 17:02:00  1.579261e+09  17.922399\n",
      "2020-01-17 17:03:00  1.579261e+09  17.922767\n",
      "2020-01-17 17:04:00  1.579261e+09  17.923135\n",
      "2020-01-17 17:05:00  1.579261e+09  17.923503\n",
      "2020-01-17 17:06:00  1.579261e+09  17.923870\n",
      "2020-01-17 17:07:00  1.579261e+09  17.924238\n",
      "2020-01-17 17:08:00  1.579261e+09  17.924606\n",
      "2020-01-17 17:09:00  1.579261e+09  17.924974\n",
      "2020-01-17 17:10:00  1.579261e+09  17.925341\n",
      "2020-01-17 17:11:00  1.579261e+09  17.925709\n",
      "2020-01-17 17:12:00  1.579261e+09  17.926077\n",
      "2020-01-17 17:13:00  1.579261e+09  17.926445\n",
      "2020-01-17 17:14:00  1.579261e+09  17.926812\n",
      "2020-01-17 17:15:00  1.579262e+09  17.927180\n",
      "2020-01-17 17:16:00  1.579262e+09  17.927548\n",
      "2020-01-17 17:17:00  1.579262e+09  17.927916\n",
      "2020-01-17 17:18:00  1.579262e+09  17.928283\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Run regularly - enter script number and time variable (m, h, d)\n",
    "script = input()\n",
    "time = input()\n",
    "process_script(script,time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
